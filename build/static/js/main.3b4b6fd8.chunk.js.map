{"version":3,"sources":["store/reducers/reducers.js","store/store.js","components/formAnimal.js","components/index.js","router/router.js","App.js","serviceWorker.js","index.js"],"names":["initialState","animals","animales","state","action","type","store","createStore","reducer","FitxaAnimal","props","formData","classAnimal","tamany","especie","raça","capa","color","aptitud","sexo","estatRec","dataEut","imatge","llocRecollida","municipi","provincia","handleChanges","bind","event","this","setState","target","name","value","React","Component","FitxaA","connect","BaseRouter","exact","path","component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kRAAMA,EAAe,CACjBC,QAAQ,IAeGC,EATE,WAAiC,IAAhCC,EAA+B,uDAAvBH,EAAaI,EAAU,uCAC7C,OAAOA,EAAOC,MACV,IAAK,cAED,OAAOF,EAAMF,UCJVK,EAFDC,YAAYC,G,+DCM1B,IAMMC,E,kDACF,WAAYC,GAAO,IAAD,8BACd,cAAMA,IACDP,MAAQ,CACTQ,SAAS,CACLC,YAAY,CACR,SACA,SACA,UAEJC,OAAO,CACH,UACA,UACA,WAEJC,QAAS,UACTC,UAAK,CACD,WACA,WACA,YAEJC,KAAM,UACNC,MAAO,UACPC,QAAQ,CACJ,MACA,MACA,OAEJC,KAAK,CACD,SACA,WAGJC,SAAS,UACTC,QAAQ,UACRC,OAAO,UACPC,cAAc,UACdC,SAAS,CACL,OACA,OACA,QAEJC,UAAU,CACN,QACA,QACA,WAIZ,EAAKC,cAAgB,EAAKA,cAAcC,KAAnB,gBAhDP,E,0DAmDJC,GACVC,KAAKC,SAAS,CAACnB,SAAS,eAAIkB,KAAK1B,MAAMQ,SAAhB,eAA2BiB,EAAMG,OAAOC,KAAOJ,EAAMG,OAAOE,Y,+BAGnF,OACI,6BAAMJ,KAAK1B,MAAMQ,SAASa,c,GAzDZU,IAAMC,WChBnBC,ED+EEC,YAAQ,KAAK,KAAbA,CAAmB5B,GEjEnB6B,EAXI,WAGf,OACI,6BACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,cAAcC,UAAWL,MCUxCM,MAZf,WACE,OAEK,kBAAC,IAAD,CAAUpC,MAASA,GAElB,kBAAC,IAAD,KACA,kBAAC,EAAD,SCDYqC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3b4b6fd8.chunk.js","sourcesContent":["const initialState = {\n    animals:[],\n}\n\n\n\n\nconst animales = (state = initialState,action) =>{\n    switch(action.type){\n        case \"GET_ANIMALS\":\n\n            return state.animals\n    }\n}\n\n\nexport default animales","import {createStore} from 'redux'\nimport reducer from './reducers/reducers'\n\n\n\nconst store = createStore(reducer);\n\nexport default store;","import React from 'react'\n\n\nimport {connect} from 'react-redux'\n// import {  Link } from 'react-router-dom';\n\nfunction mapStateToProps(state){\n    return \"test\"\n}\n\n\nconst mapDispatchToProps = dispatch =>{\n    return \"test\"\n}\n\n\n\nclass FitxaAnimal extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            formData:{\n                classAnimal:[\n                    'Class1',\n                    'Class2',\n                    'Class3'\n                ],\n                tamany:[\n                    'Tamany1',\n                    'Tamany2',\n                    'Tamany3'\n                ],\n                especie: 'default',\n                raça:[\n                    'raça1',\n                    'raça2',\n                    'raça3'\n                ],\n                capa: 'default',\n                color: 'default',\n                aptitud:[\n                    'Ap1',\n                    'Ap2',\n                    'Ap3'\n                ],\n                sexo:[\n                    'Mascle',\n                    'Femella'\n                ],\n\n                estatRec:'default',\n                dataEut:'default',\n                imatge:'default',\n                llocRecollida:'default',\n                municipi:[\n                    'Mun1',\n                    'Mun2',\n                    'Mun3'\n                ],\n                provincia:[\n                    'Prov1',\n                    'Prov2',\n                    'Prov3'\n                ]\n            },\n        }\n        this.handleChanges = this.handleChanges.bind(this);\n\n    }\n    handleChanges(event){\n        this.setState({formData:{...this.state.formData, [event.target.name]: event.target.value }})\n        }\n    render(){\n        return(\n            <div>{this.state.formData.municipi}</div>\n        )\n    }\n}\n\n\nexport default connect(null,null)(FitxaAnimal)","import FitxaAnimal from './formAnimal'\nexport const FitxaA = FitxaAnimal;\n","import React from 'react'\nimport { Route } from 'react-router-dom'\nimport {FitxaA} from '../components/index'\n\nconst BaseRouter = () => {\n\n    //Contiene todas las rutas possibles de la app\n    return( \n        <div>\n            <Route exact path=\"/formAnimal\" component={FitxaA}/>\n\n        </div>\n    )\n}\n \nexport default BaseRouter","import React from 'react';\nimport './App.css';\nimport {Provider} from 'react-redux'\nimport { HashRouter as Router } from 'react-router-dom';\nimport store from './store/store'\n\nimport BaseRouter from './router/router';\nfunction App() {\n  return (\n    // El provider se encarga de cargar el store para toda la app\n       <Provider store = {store}> \n       {/*Base router contiene todas las rutas de la app */}\n        <Router>\n        <BaseRouter/>\n        </Router>\n      </Provider>\n  );\n}\n\nexport default App;\n ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}